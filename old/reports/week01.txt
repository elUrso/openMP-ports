TODO
	ompss-ee -> omp-ee
	vtune (done)
	unibench

REPORT

	[*] OMPSS-EE -> OMP-EE

	The tutorial has 6 sections, from 0 to 5.
	The first one is the introduction to the Omp-Ss paradigm,
	therefore it will not be implemented, but also because 
	it explore the concept of heterogeneous computing, wich
	will not be developed here.

	Section 1 - Examples

	[Cholesky]

	The code itself is not very complex, but it requires intel
	MKL and the code does not especifies the correct version to utilize.

	After many attempts to update the code to the last MKL, due to lack
	of experience with the library, the port of this example will be done later.

	[Stream]

	As the code only utilized the task dependecy part of Omp-Ss,
	it was really easy to port to openMP.

	The main problem was compiling it, because it requires -mcmodel=large as
	a gcc flag.

	The sintax in|out ([a]b) in Omp-Ss turns into depend(in|out: b:a)
	[a]b is the same as an array that starts at b and has a itens.

	As openMP task depend pragmas are only possible on the caller side,
	just copy the pragma from the callee and convert it.

	Usually it iterates over an array A, so [a]b turns into A[b:a].

	To fully port it, a #prama omp parralel and a #pragma omp single
	pragmas were added to encapsulate the main function and done.

	Using a 2-core machine with hyperthreading:
	1-threads: 14.3678 secs
	2-threads: 07.6512 secs
	3-threads: 06.8010 secs
	4-threads: 06.5390 secs

	The bar and deps variants only differs the ommission of
	taskwait pragmas in deps.

	Looks like the task dependecy graph ensures that syncronization
	thru taskwait is not so costly, so the ommission only led to
	marginal improvement (< 5%).

	[Array-Sum]

	[*] V-Tune	

	Learned how to utilize V-Tune in order to find hotspots in a program;


	[*] UniBench

	The first thing to note down is that for unknown reasons there are multiple 
	repositories named UniBench, 3 of them looks like differents stages of the project.

	The most complete is (gitlab://)ciroceissler/UniBench

	But the tool is not so well designed, with a lot of hardcoded paths and 
	improper documentation so benchmarks are also need to be ported

	A new build system was done, 'bench'

	It aims flexibily and little configuration. It was made using Lua and to port a benchmark,
	the user just need to write a build.lua file and add the benchmark in the config file.

	This config file also holds the user configurantion and path for libaries and programs.

	For now adding config preferences also require editing the actions.lua file, so it can pass
	the preferences to the build.lua file.

	But it is in the TODO list of the bench project


