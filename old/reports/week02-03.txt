TODO
	Porta mais benchmark
	Listar applicações ideiais

REPORT
	Por uma série de imprevistos e compromissos, a semana 2 foi combinada com a semana 3.

	Bench: Toy1

	Número de dependencias geradas é muito grande, causando um overhead da libgomp.
	Otimizações sequenciais fazem com que o programa tenha uma perda de performance ainda maior.

OMP/SEQ: Toy1 - 4 (0,004 x 0,001) min(0,001) u(s)

MARK: Toy1 - NO

	Bench: Toy2

	Similar ao Toy1. Apresentando um indicativo que a granularidade das taks tem um limite em relação ao runtime,
	senão o overhead passa a ser muito grande.

OMP/SEQ: Toy2 - 3 (0,003 x 0,001) min(0,001) u(s)

MARK: Toy2 - NO

	Bench: Toy3

	Similar aos Toy1 e Toy2. O tempo de  criação de threads gira em torno de 20ms enquanto o hotspot do algoritmo leva cerca de 7~9ms.
	Indicando ainda uma granularidade muito fina.


OMP/SEQ: Toy3 - 2,42 (0,080 x 0,033) min(0,001) u(s)

MARK: Toy3 - NO

	Bench: Toy4

	Similar aos Toy1, Toy2 e Toy3. 


OMP/SEQ: Toy4 - 3,5 (0,007 x 0,002) min(0,001) u(s)

MARK: Toy4 - NO

	Bench: Toy5

	A utilização do 'depend' no 'for' gerou um overhead colossal.

OMP/SEQ: Toy5 - 14,14 (0,099 x 0,007) min(0,001) u(s)

MARK: Toy5 - NO

	Bench: Toy6

	OS 0,06 s a mais em relação ao sequencial foi basicamente o overhead do libgomp

OMP/SEQ: Toy6 - 4,5 (0,081 x 0,020) min(0,001) u(s)

MARK: Toy6 - NO

	Bench: Toy7

	Similar aos anteriores, sendo grande parte, overhead do libgomp.

OMP/SEQ: Toy7 - 4,47 (0,134 x 0,030) min(0,001) u(s)

MARK: Toy7 - NO

	Bench: Toy8

	Similar aos anteriores, o excesso de dependências gerou um overhead muito grande.

OMP/SEQ: Toy8 - 4,47 (0,152 x 0,006) min(0,001) u(s)

MARK: Toy8 - NO


